type Query {
  user(accountAddress: String): User
  pendingUsers: [User]!
  movies: [Movie]!
  movie(IMDB: String): Movie
  prices(IMDB: String!): [Price]!
  price(filter: PriceFilter): Price!
  config: Config!
  allMovies: [Movie]!
}

type Config {
  factor: Int
}

enum MovieMedium {
  THEATER
  EST
  DTR
  PAYTV
  SVOD
  FREETV
}

enum PriceType {
  WHITERABBIT
  RIGHTSHOLDER
}

enum ApprovalStatus {
  APPROVED
  PENDING
  REJECTED
}

enum UserRole {
  ADMIN
  RIGHTSHOLDER
}

scalar DateTime

type Price {
  priceId: String
  type(option: PriceType): String
  amount: String
  regions: [String]
  medium(option: MovieMedium): String
  fromWindow: DateTime
  toWindow: DateTime
}

input PriceFilter {
  IMDB: String
  region: String
  medium: String
}

type User {
  accountAddress: String!
  name: String
  id: Int
  imdbId: String
  email: String
  kind: String
  roles: [UserRole]
  movies: [Movie]
  companyId: String
  company: Company
  status(option: ApprovalStatus): String 
}

type MovieMetadata {
  id: Int
  title: String
  posterUrl: String 
  year: String
}

type MovieRecord {
  source: String
  value: String
}

type Movie {
  id: Int
  IMDB: String
  ISAN: String
  record: MovieRecord
  metadata: MovieMetadata
  chainTitle: [String]
  rightsHolder: User
  pricing: [Price]
  status(option: ApprovalStatus): String
}

type Company {
  id: String
  name: String
}

input MovieRecordInput {
  source: String
  value: String
}

# Updates section
input PriceInput {
  IMDB: String
  priceId: String
  type: String
  amount: String
  regions: [String]
  medium: String
  fromWindow: DateTime
  toWindow: DateTime
}

type PriceResponse {
  success: Boolean!
  message: String
  pricing: Price
}

input CompanyInput {
  id: String
  name: String!
}

input MovieInput {
  id: Int
  IMDB: String
  ISAN: String
  record: MovieRecordInput
}

type MovieResponse {
  success: Boolean!
  message: String
  movies: Movie
}

input UserInput {
  accountAddress: String
  name: String
  id: Int
  imdbId: String
  email: String
  kind: String
  company: CompanyInput
  roles: [UserRole]
}

type UserResponse {
  success: Boolean!
  message: String
  user: User
}

type Mutation {
  addUser(user: UserInput): UserResponse
  addMovie(movie: MovieInput): MovieResponse!
  addPrice(pricing: PriceInput): PriceResponse!
  updatePrice(pricing: PriceInput): PriceResponse!
  deletePrice(pricing: PriceInput): PriceResponse!
  approveUser(userId: String): UserResponse!
  declineUser(userId: String): UserResponse!
  deleteMovie(imdbId: String): MovieResponse!
  deleteAllMovies: MovieResponse!
}
