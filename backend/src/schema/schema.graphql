type Query {
  user(accountAddress: String): User
  movies: [Movie]!
  movie(IMDB: String!): Movie
}

enum PriceType {
  WHITERABBIT
  RIGHTSHOLDER
}

enum ApprovalStatus {
  APPROVED
  PENDING
  REJECTED
}

enum UserRole {
  ADMIN
  RIGHTSHOLDER
}

type Pricing {
  type(option: PriceType): String
  amount: Float
  region: String
}

type User {
  accountAddress: String!
  name: String
  contact: String
  roles: [UserRole]
  movies: [Movie]
  status(option: ApprovalStatus): String 
}

type MovieMetadata {
  title: String
  posterUrl: String 
}

type MovieRecord {
  source: String
  value: String
}

type Movie {
  id: ID!
  IMDB: String
  ISAN: String
  record: MovieRecord
  metadata: MovieMetadata
  chainTitle: [String]
  rightsHolder: User
  pricing: [Pricing]
  status(option: ApprovalStatus): String
}

input MovieRecordInput {
  source: String
  value: String
}

# Updates section
input MovieInput {
  IMDB: String
  ISAN: String
  record: MovieRecordInput
}

input AttachInput {
  movies: [ ID ]
  rightsHolder: UserInput
}

type MovieResponse {
  success: Boolean!
  message: String
  movies: [ Movie ]
}

input UserInput {
  accountAddress: String
  name: String
  contact: String
  roles: [UserRole]
}

type UserResponse {
  success: Boolean!
  message: String
  user: User
}

type Mutation {
  addUser(user: UserInput): UserResponse
  addMovie(movies: [MovieInput]): MovieResponse!
}
